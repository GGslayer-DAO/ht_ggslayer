// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

const TableNameEventIno = "event_inos"

// EventIno mapped from table <event_inos>
type EventIno struct {
	ID         int32   `gorm:"column:id;primaryKey;autoIncrement:true" json:"id"` // 主键ID
	EventID    int32   `gorm:"column:event_id;not null" json:"event_id"`          // 活动id
	Price      float64 `gorm:"column:price;not null" json:"price"`                // 价钱
	TotalAward float64 `gorm:"column:total_award;not null" json:"total_award"`    // 奖池数量
	TotalCount int   `gorm:"column:total_count;not null" json:"total_count"`    // 总共售卖数量
	Chain      string  `gorm:"column:chain;not null" json:"chain"`                // 支持的链
}

// TableName EventIno's table name
func (*EventIno) TableName() string {
	return TableNameEventIno
}

func NewEventIno() *EventIno {
	return &EventIno{}
}

//FindInfoByEventId 根据活动id查找相关数据信息
func (m *EventIno) FindInfoByEventId(eventId int32) (ino *EventIno, err error) {
	err = db.Model(m).Where("event_id = ?", eventId).Find(&ino).Error
	return
}

//FindInfoByEventIds 根据活动id查找
func (m *EventIno) FindInfoByEventIds(eventIds []int32) (res map[int32]*EventIno, err error) {
	inos := make([]*EventIno, 0, len(eventIds))
	err = db.Model(m).Where("event_id in (?)", eventIds).Find(&inos).Error
	if err != nil {
		return
	}
	res = make(map[int32]*EventIno)
	for _, ino := range inos {
		res[ino.EventID] = ino
	}
	return
}
