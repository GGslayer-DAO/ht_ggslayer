// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
)

const TableNameGameBlockChain = "game_block_chains"

// GameBlockChain mapped from table <game_block_chains>
type GameBlockChain struct {
	ID         int32  `gorm:"column:id;primaryKey;autoIncrement:true" json:"id"` // 主键ID
	GameID     int32  `gorm:"column:game_id;not null" json:"game_id"`            // 游戏id
	BlockChain string `gorm:"column:block_chain;not null" json:"block_chain"`    // 游戏区块链
	ShortName string `gorm:"column:short_name;null" json:"short_name"`    // 简称
	Symbol string `gorm:"column:symbol;null" json:"symbol"`    // 币名称
	Collection string `gorm:"column:collections;null" json:"collections"`    // nft集合名称
	ContactAddress string    `gorm:"column:contact_address;null" json:"contact_address"`                   // 合约地址
}

func NewGameBlockChain() *GameBlockChain {
	return &GameBlockChain{}
}

// TableName GameBlockChain's table name
func (*GameBlockChain) TableName() string {
	return TableNameGameBlockChain
}

const (
	_insertGameBlockChainSql = "insert into game_block_chains(game_id,block_chain,short_name) values "
)

//BatchInserch 批量插入
func (m *GameBlockChain) BatchInserch(gameBlockChains []*GameBlockChain) {
	db.Exec(m.GenInsertSQL(gameBlockChains))
}

// GenInsertSQL 生成批量插入的SQL
func (m *GameBlockChain) GenInsertSQL(gameBlockChains []*GameBlockChain) string {
	if len(gameBlockChains) == 0 {
		return ""
	}
	var (
		buf bytes.Buffer
		sql string
	)
	buf.WriteString(_insertGameBlockChainSql)
	for _, v := range gameBlockChains {
		s := fmt.Sprintf("(%d,'%s','%s'),", v.GameID, v.BlockChain, v.ShortName)
		buf.WriteString(s)
	}
	sql = buf.String()
	return sql[0 : len(sql)-1]
}

//获取所有数据
func (m *GameBlockChain) GetAllChain() (chains []*GameBlockChain, err error) {
	err = db.Model(m).Find(&chains).Error
	return
}

//更新数据
func (m *GameBlockChain) Update() {
	db.Model(m).Save(&m)
}

func (m *GameBlockChain) FindByCond(gameId int32, shortName string) (blockChain *GameBlockChain, err error) {
	err = db.Model(m).Where("game_id = ? and short_name = ?", gameId, shortName).Find(&blockChain).Error
	return
}

//FindAllChains 查找所有游戏链
func (m *GameBlockChain) FindAllChains() (shortChains []string, err error) {
	err = db.Model(m).Where("short_name != ''").Group("short_name").Pluck("short_name", &shortChains).Error
	return
}

//FindChainByGameId 根据游戏id查找链
func (m *GameBlockChain) FindChainByGameId(gameIds []int32) (chainMap map[int32][]string, err error) {
	var chains []*GameBlockChain
	err = db.Model(m).Where("game_id in (?)", gameIds).Find(&chains).Error
	if err != nil {
		return
	}
	chainMap = make(map[int32][]string)
	for _, chain := range chains {
		if chain.ShortName == "" {
			continue
		}
		if v, ok := chainMap[chain.GameID]; ok {
			v = append(v, chain.ShortName)
			chainMap[chain.GameID] = v
		} else {
			chainMap[chain.GameID] = []string{chain.ShortName}
		}
	}
	return
}

//FindGameIdByChain 根据链查找game_id
func (m *GameBlockChain) FindGameIdByChain(chain string) (gameIds []int32, err error) {
	err = db.Model(m).Where("short_name = ?", chain).Pluck("game_id", &gameIds).Error
	return
}

//FindInfoByContactAddress 根据合约地址查找相关数据信息
func (m *GameBlockChain) FindInfoByContactAddress(contacts []string) (gameIds []int32, symbols []string, addressMap map[string]*GameBlockChain) {
	var chains []*GameBlockChain
	db.Model(m).Where("contact_address in (?)", contacts).Find(&chains)
	if len(chains) == 0 {
		return
	}
	addressMap = make(map[string]*GameBlockChain)
	for _, chain := range chains {
		gameIds = append(gameIds, chain.GameID)
		symbols = append(symbols, chain.Symbol)
		addressMap[chain.ContactAddress] = chain
	}
	return
}

//FindByGameIdAndChain 根据游戏链或游戏id查找
func (m *GameBlockChain) FindAndUpdateByGameId(gameId int32, chain, symbol, address string) (err error) {
	gameBlockChain := new(GameBlockChain)
	err = db.Model(m).Where("game_id = ?", gameId).Where("block_chain = ? or short_name = ?", chain, chain).
		Find(&gameBlockChain).Error
	if err != nil {
		return
	}
	gameBlockChain.GameID = gameId
	gameBlockChain.Symbol = symbol
	gameBlockChain.ContactAddress = address
	db.Save(gameBlockChain)
	return
}

//FindCollectionUpdateByGameId 根据游戏链或游戏id查找
func (m *GameBlockChain) FindCollectionUpdateByGameId(gameId int32, chain, collection string) (err error) {
	err = db.Model(m).Where("game_id = ?", gameId).Where("block_chain = ? or short_name = ?", chain, chain).
		Update("collections", collection).Error
	return
}

//FindBlockChainByGameId 根据游戏id查找区块链数据信息
func (m *GameBlockChain) FindBlockChainByGameId(gameId int32) (chains []string, err error) {
	err = db.Model(m).Where("game_id = ?", gameId).Pluck("short_name", &chains).Error
	return
}

//FindChainInfoByGameId 根据游戏id查找相关链数据信息
func (m *GameBlockChain) FindChainInfoByGameId(gameId int32) (chains []*GameBlockChain, err error) {
	err = db.Model(m).Where("game_id = ?", gameId).Find(&chains).Error
	return
}

//DeleteByGameId 根据游戏id删除链上数据信息
func (m *GameBlockChain) DeleteByGameId(gameId int32) (err error) {
	err = db.Where("game_id = ?", gameId).Delete(m).Error
	return
}
