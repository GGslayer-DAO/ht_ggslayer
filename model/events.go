// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
	"fmt"
	"time"
)

const TableNameEvent = "events"

// Event mapped from table <events>
type Event struct {
	ID        int32     `gorm:"column:id;primaryKey;autoIncrement:true" json:"id"`                      // 主键ID
	Name      string    `gorm:"column:name;not null" json:"name"`                                       // 项目名称
	Describe  string    `gorm:"column:describe" json:"describe"`                                        // 项目简介
	Image     string    `gorm:"column:image;not null" json:"image"`                                     // 项目封面图
	URL       string    `gorm:"column:url" json:"url"`                                                  // 活动链接
	Type      string    `gorm:"column:type;not null" json:"type"`                                       // 项目类型
	Tags      string    `gorm:"column:tags" json:"tags"`                                                // 标签
	Status    int     `gorm:"column:status;not null" json:"status"`                                   // 状态：0未上架,1已上架
	IsDel     int     `gorm:"column:status;not null" json:"-"`                                   // 是否删除：0未删除,1已删除
	EndTime   time.Time `gorm:"column:end_time" json:"end_time"`                                        // 结束时间
	CreatedAt time.Time `gorm:"column:created_at;not null;default:CURRENT_TIMESTAMP" json:"created_at"` // 创建时间
	UpdatedAt time.Time `gorm:"column:updated_at;not null;default:CURRENT_TIMESTAMP" json:"-"` // 更新时间
	EventDetail  interface{}  `gorm:"-" json:"event_detail"`
}

// TableName Event's table name
func (*Event) TableName() string {
	return TableNameEvent
}

func NewEvent() *Event {
	return new(Event)
}

func (m *Event) Save() {
	db.Save(m)
}

func (m *Event) FindEventHomeList(page, size int, ty string) {

}

//FindEventList 活动列表
func (m *Event) FindEventList(page, size, status int, keyword, ty string, isAdmin bool) (events []*Event, count int64, err error) {
	offset := (page - 1) * size
	tx := db.Model(m)
	if keyword != "" {
		s := fmt.Sprintf("%s", "%")
		s = fmt.Sprintf("%s%s", s, keyword)
		s = fmt.Sprintf("%s%s", s, "%")
		tx = tx.Where("name like ?", s)
	}
	if status != 2 {
		tx = tx.Where("status = ?", status)
	}
	if ty != "" {
		tx = tx.Where("type = ?", ty)
	}
	if !isAdmin {
		tx = tx.Where("status = 1")
	}
	err = tx.Where("is_del = 0").Count(&count).Offset(offset).Limit(size).Order("created_at desc").Find(&events).Error
	return
}

//UpdateEventInfoByEventId 根据活动id更新数据信息
func (m *Event) UpdateEventInfoByEventId(eventId int32, datas map[string]interface{}) (err error) {
	err = db.Model(m).Where(eventId).Updates(datas).Error
	return
}

//FindInfoById 根据id查找相关数据信息
func (m *Event) FindInfoById(id int32) (event *Event, err error) {
	err = db.Model(m).Where("id = ?", id).Find(&event).Error
	return
}
