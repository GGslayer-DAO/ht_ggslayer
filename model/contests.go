// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
	"fmt"
	"time"
)

const TableNameContest = "contests"

// Contest mapped from table <contests>
type Contest struct {
	ID        int32     `gorm:"column:id;primaryKey;autoIncrement:true" json:"id"`                        // 主键ID
	Title     string    `gorm:"column:title;not null" json:"title"`                                       // 比赛标题
	Status    int     `gorm:"column:status;not null" json:"status"`                                     // 比赛状态：0未开始,1进行中,2已完成
	IsDel    int     `gorm:"column:is_del;not null" json:"-"`                                     // 删除状态：0未删除,1已删除
	StartTime time.Time `gorm:"column:start_time;not null" json:"start_time"`                             // 开始时间
	EndTime   time.Time `gorm:"column:end_time;not null" json:"end_time"`                                 // 结束时间
	CreatedAt time.Time `gorm:"column:created_at;not null;default:CURRENT_TIMESTAMP" json:"created_at"`   // 创建时间
	UpdatedAt time.Time `gorm:"column:updated_at;not null;default:1970-01-01 08:00:01" json:"-"` // 更新时间
	GameArr []int32  `gorm:"-" json:"game_arr"`
}


// TableName Contest's table name
func (*Contest) TableName() string {
	return TableNameContest
}

func NewContest() *Contest {
	return new(Contest)
}

func (m *Contest) FindContestAdminList(page, size, status int, keyword string) (contests []*Contest, count int64, err error) {
	offset := (page - 1) * size
	tx := db.Model(m)
	if keyword != "" {
		s := fmt.Sprintf("%s", "%")
		s = fmt.Sprintf("%s%s", s, keyword)
		s = fmt.Sprintf("%s%s", s, "%")
		tx = tx.Where("title like ?", s)
	}
	if status != 2 {
		tx = tx.Where("status = ?", status)
	}
	err = tx.Where("is_del = 0").Count(&count).Offset(offset).Limit(size).Order("created_at desc").Find(&contests).Error
	return
}

//UpdateContestInfoByContestId 根据比赛id更新数据信息
func (m *Contest) UpdateContestInfoByContestId(contestId int32, datas map[string]interface{}) (err error) {
	err = db.Model(m).Where(contestId).Updates(datas).Error
	return
}

//FindInfoById 根据比赛id查找比赛数据信息
func (m *Contest) FindInfoById(contestId int32) (contest *Contest, err error) {
	err = db.Model(m).Where(contestId).Find(&contest).Error
	return
}

func (m *Contest) FindInfoByCond(cond map[string]interface{}) (contest *Contest, err error) {
	tx := db.Model(m).Where("is_del = 0")
	if v, ok := cond["title"]; ok {
		tx = tx.Where("title = ?", v.(string))
	}
	if v, ok := cond["status"]; ok {
		tx = tx.Where("status = ?", v.(int))
	}
	err = tx.Find(&contest).Error
	return
}

//FindTitleByHistory 获取往期比赛标题
func (m *Contest) FindTitleByHistory() (res []string, err error) {
	err = db.Model(m).Where("status = 2 and is_del = 0").Order("created_at desc").Pluck("title", &res).Error
	return
}
