// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
)

const TableNameGameOther = "game_others"

// GameOther mapped from table <game_others>
type GameOther struct {
	ID              int32  `gorm:"column:id;primaryKey;autoIncrement:true" json:"-"`          // 主键ID
	GameID          int32  `gorm:"column:game_id;not null" json:"-"`                     // 游戏id
	BalanceRate     string `gorm:"column:balance_rate;not null" json:"balance_rate"`           // 当前金额比率
	BalanceValue    string `gorm:"column:balance_value;not null" json:"balance_value"`         // 当前价格
	ActiveUserRate  string `gorm:"column:active_user_rate;not null" json:"active_user_rate"`   // 活跃用户比率
	ActiveUserValue int  `gorm:"column:active_user_value;not null" json:"active_user_value"` // 活跃用户数量
	ActiveUserRate7d  string `gorm:"column:active_user_rate_7d;not null" json:"active_user_rate_7d"`   // 7天活跃用户比率
	ActiveUserValue7d int  `gorm:"column:active_user_value_7d;not null" json:"active_user_value_7d"` // 7天活跃用户数量
	ActiveUserRate30d  string `gorm:"column:active_user_rate_30d;not null" json:"active_user_rate"`   // 30天活跃用户比率
	ActiveUserValue30d int  `gorm:"column:active_user_value_30d;not null" json:"active_user_value"` // 30天活跃用户数量
	SocialRate  string `gorm:"column:social_rate;not null" json:"social_rate"`   // 24小时社交分比率
	SocialValue int  `gorm:"column:social_value;not null" json:"social_value"` // 24小时社交分数量
	SocialRate7d  string `gorm:"column:social_rate_7d;not null" json:"social_rate_7d"`   // 7天社交分比率
	SocialValue7d int  `gorm:"column:social_value_7d;not null" json:"social_value_7d"` // 7天社交分数量
	SocialRate30d  string `gorm:"column:social_rate_30d;not null" json:"social_rate_30d"`   // 30天社交分比率
	SocialValue30d int  `gorm:"column:social_value_30d;not null" json:"social_value_30d"` // 30天社交分数量
	HoldersRate     string `gorm:"column:holders_rate;not null" json:"holders_rate"`           // 持有用户比例
	HoldersValue     int  `gorm:"column:holders_value;not null" json:"holders_value"`           // 持有用户数量
	VolumeRate     string `gorm:"column:volume_rate;not null" json:"volume_rate"`           // 交易金额比例
	VolumeValue     float64  `gorm:"column:volume_value;not null" json:"volume_value"`           // 交易金额数值
}

func NewGameOther() *GameOther {
	return &GameOther{}
}

// TableName GameOther's table name
func (*GameOther) TableName() string {
	return TableNameGameOther
}

const (
	_insertGameOtherSql = "insert into game_others(game_id,balance_rate,balance_value,active_user_rate,active_user_value,holders_rate,holders_value) values "
)

//BatchInserch 批量插入
func (m *GameOther) BatchInserch(gameOthers []*GameOther) {
	db.Exec(m.GenInsertSQL(gameOthers))
}

// GenInsertSQL 生成批量插入的SQL
func (m *GameOther) GenInsertSQL(gameOthers []*GameOther) string {
	if len(gameOthers) == 0 {
		return ""
	}
	var (
		buf bytes.Buffer
		sql string
	)
	buf.WriteString(_insertGameOtherSql)
	for _, v := range gameOthers {
		s := fmt.Sprintf("(%d,'%s','%s','%s', %d, '%s', %d),", v.GameID, v.BalanceRate, v.BalanceValue, v.ActiveUserRate,
			v.ActiveUserValue, v.HoldersRate, v.HoldersValue)
		buf.WriteString(s)
	}
	sql = buf.String()
	return sql[0 : len(sql)-1]
}

//FindGameOtherByGameId
func (m *GameOther) FindGameOtherByGameId(gameId []int32) (gameOtherMap map[int32]*GameOther, err error) {
	var gameOthers []*GameOther
	err = db.Model(m).Where("game_id in (?)", gameId).Find(&gameOthers).Error
	if err != nil {
		return
	}
	gameOtherMap = make(map[int32]*GameOther)
	for _, gameOther := range gameOthers {
		gameOtherMap[gameOther.GameID] = gameOther
	}
	return
}

//UpdateGameOtherByGameId 根据游戏id更新游戏数据信息
func (m *GameOther) UpdateGameOtherByGameId(gameId int) {
	db.Model(m).Where("game_id = ?", gameId).Updates(m)
	return
}

//FindAllSocialValueByOrder 根据社交分从上到下查询
func (m *GameOther) FindAllSocialValueByOrder() (orders []*GameOther, err error) {
	err = db.Model(m).Order("social_value desc").Find(&orders).Error
	return
}
