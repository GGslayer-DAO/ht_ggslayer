// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
)

const TableNameGameTag = "game_tags"

// GameTag mapped from table <game_tags>
type GameTag struct {
	ID     int32  `gorm:"column:id;primaryKey;autoIncrement:true" json:"id"` // 主键ID
	GameID int32  `gorm:"column:game_id;not null" json:"game_id"`            // 游戏id
	Tag    string `gorm:"column:tag;not null" json:"tag"`                    // 标签
}

func NewGameTag() *GameTag {
	return &GameTag{}
}

// TableName GameTag's table name
func (*GameTag) TableName() string {
	return TableNameGameTag
}

const (
	_insertGameTagSql = "insert into game_tags(game_id,tag) values "
)

//BatchInserch 批量插入
func (m *GameTag) BatchInserch(gameTags []*GameTag) {
	db.Exec(m.GenInsertSQL(gameTags))
}

// GenInsertSQL 生成批量插入的SQL
func (m *GameTag) GenInsertSQL(gameTags []*GameTag) string {
	if len(gameTags) == 0 {
		return ""
	}
	var (
		buf bytes.Buffer
		sql string
	)
	buf.WriteString(_insertGameTagSql)
	for _, v := range gameTags {
		s := fmt.Sprintf("(%d,'%s'),", v.GameID, v.Tag)
		buf.WriteString(s)
	}
	sql = buf.String()
	return sql[0 : len(sql)-1]
}

func (m *GameTag) FindTagsByGameIds(gameIds []int32) (gameTagsMap map[int32][]string, err error) {
	var gameTags []*GameTag
	err = db.Model(m).Where("game_id in (?)", gameIds).Find(&gameTags).Error
	if err != nil {
		return
	}
	gameTagsMap = make(map[int32][]string)
	for _, tag := range gameTags {
		if v, ok := gameTagsMap[tag.GameID]; ok {
			v = append(v, tag.Tag)
			gameTagsMap[tag.GameID] = v
		} else {
			gameTagsMap[tag.GameID] = []string{tag.Tag}
		}
	}
	return
}

//FindAllTags 查找所有tag
func (m *GameTag) FindAllTags() (tags []string, err error) {
	err = db.Model(m).Group("tag").Pluck("tag", &tags).Error
	return
}

//根据标签查gameid
func (m *GameTag) FindGameIdByTag(tag string) (gameIds []int32, err error) {
	err = db.Model(m).Where("tag = ?", tag).Pluck("game_id", &gameIds).Error
	return
}

//FindBlockChainByGameId 根据游戏id查找区块链数据信息
func (m *GameTag) FindTagByGameId(gameId int32) (tags []string, err error) {
	err = db.Model(m).Where("game_id = ?", gameId).Pluck("tag", &tags).Error
	return
}

//DeleteByGameId 根据游戏id删除游戏标签
func (m *GameTag) DeleteByGameId(gameId int32) (err error) {
	err = db.Where("game_id = ?", gameId).Delete(m).Error
	return
}