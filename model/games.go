// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
	"fmt"
	"github.com/spf13/cast"
	"gorm.io/gorm"
	"strings"
	"time"
)

const TableNameGame = "games"

// Game mapped from table <games>
type Game struct {
	ID         int32     `gorm:"column:id;primaryKey;autoIncrement:true" json:"id"`                        // 主键ID
	Name       string    `gorm:"column:name;not null" json:"name"`                                         // 名称
	GameName   string    `gorm:"column:game_name;not null" json:"game_name"`                               // 游戏名称
	Logo       string    `gorm:"column:logo;not null" json:"logo"`                                         // 图片logo
	Describe   string    `gorm:"column:describe" json:"describe"`                                          // 游戏简介
	Motivate   int64     `gorm:"column:motivate;not null" json:"motivate"`                                 // 游戏打榜数
	SocialRate int32     `gorm:"column:social_rate;not null" json:"-"`                           // 社交分值
	IsDel      int32     `gorm:"column:is_del;not null" json:"-"`                                     // 是否删除,0未删除，1已删除
	Status      int32     `gorm:"column:status;not null" json:"status"`                                     // 是否删除,0未删除，1已删除
	StatusTag   string    `gorm:"column:status_tag;null" json:"status_tag"`   //状态标签
	IsTrending      int32     `gorm:"column:is_trending;not null" json:"is_trending"`                                     // 是否删除,0未删除，1已删除
	IsRecentry      int32     `gorm:"column:is_recentry;not null" json:"is_recentry"`                                     // 是否删除,0未删除，1已删除
	IsLatestVc      int32     `gorm:"column:is_latest_vc;not null" json:"is_latest_vc"`                                     // 是否删除,0未删除，1已删除
	CreatedAt  time.Time `gorm:"column:created_at;not null;default:CURRENT_TIMESTAMP" json:"-"`   // 创建时间
	UpdatedAt  time.Time `gorm:"column:updated_at;not null;default:1970-01-01 08:00:01" json:"-"` // 更新时间
}

func NewGames() *Game {
	return &Game{}
}

// TableName Game's table name
func (*Game) TableName() string {
	return TableNameGame
}

//创建游戏
func (m *Game) Create() (gameId int32, err error) {
	err = db.Create(m).Error
	return m.ID, err
}

//根据条件查找游戏
func (m *Game) FindGameByCond(cond map[string]interface{}) (games []*Game, err error) {
	tx := db.Model(m)
	if _, ok := cond["is_trending"]; ok {
		tx = tx.Where("is_trending > 0")
	}
	if _, ok := cond["is_recentry"]; ok {
		tx = tx.Where("is_recentry > 0")
	}
	if _, ok := cond["is_latest_vc"]; ok {
		tx = tx.Where("is_latest_vc > 0")
	}
	if v, ok := cond["limit"]; ok {
		tx = tx.Limit(cast.ToInt(v))
	}
	if v, ok := cond["order"]; ok {
		orderArr := strings.Split(cast.ToString(v), ",")
		tx = tx.Order(fmt.Sprintf("%s %s", orderArr[0], orderArr[1]))
	}
	if v, ok := cond["game_id"]; ok {
		tx = tx.Where("id = ?", v)
	}
	err = tx.Where("status = 1").Find(&games).Error
	return
}

//FindIndex 游戏列表
func (m *Game) FindIndex(page, size int, gameIds []int32, gameName, statusTag string, timeTag int, sortColumn,
	sortTag string, isGameTab int) (games []*Game, count int64, err error) {
	offset := (page - 1) * size
	tx := db.Table("games as g").Joins("left join game_others as o on g.id = o.game_id")
	if len(gameIds) > 0 {
		tx = tx.Where("g.id in (?)", gameIds)
	}
	if gameName != "" {
		s := fmt.Sprintf("%s", "%")
		s = fmt.Sprintf("%s%s", s, gameName)
		s = fmt.Sprintf("%s%s", s, "%")
		tx = tx.Where("g.game_name like ?", s)
	}
	if statusTag != "" {
		tx = tx.Where("g.status_tag = ?", statusTag)
	}
	if isGameTab == 1 {
		tx = tx.Where("g.is_trending > 0")
	}
	if isGameTab == 2 {
		tx = tx.Where("g.is_recentry > 0")
	}
	if isGameTab == 3 {
		tx = tx.Where("g.is_latest_vc > 0")
	}
	if sortColumn == "" {
		if isGameTab == 4 {
			tx = tx.Order("g.motivate desc")
		}
		if timeTag == 1 {
			tx = tx.Order("o.social_value desc")
		} else if timeTag == 2 {
			tx = tx.Order("o.social_value_7d desc")
		} else if timeTag == 3 {
			tx = tx.Order("o.social_value_30d desc")
		}
	} else {
		sortSql := m.GenSortSql(timeTag, sortTag, sortColumn)
		tx = tx.Order(sortSql)
	}
	err = tx.Where("g.status = 1 and g.is_del = 0").Count(&count).Offset(offset).Limit(size).Find(&games).Error
	return
}

//拼接排序字段
func (m *Game) GenSortSql(timeTag int, sortTag, sortColumn string) string {
	if timeTag == 1 {
		switch sortColumn {
		case "social":
			return fmt.Sprintf("o.social_value %s", sortTag)
		case "holder":
			return fmt.Sprintf("o.holders_value %s", sortTag)
		case "active_user":
			return fmt.Sprintf("o.active_user_value %s", sortTag)
		}
	} else if timeTag == 2 {
		switch sortColumn {
		case "social":
			return fmt.Sprintf("o.social_value_7d %s", sortTag)
		case "holder":
			return fmt.Sprintf("o.holders_value %s", sortTag)
		case "active_user":
			return fmt.Sprintf("o.active_user_value_7d %s", sortTag)
		}
	} else if timeTag == 3 {
		switch sortColumn {
		case "social":
			return fmt.Sprintf("o.social_value_30d %s", sortTag)
		case "holder":
			return fmt.Sprintf("o.holders_value %s", sortTag)
		case "active_user":
			return fmt.Sprintf("o.active_user_value_30d %s", sortTag)
		}
	}
	return ""
}

//FindInfoByName 根据游戏名字查找相关信息
func (m *Game) FindInfoByName(gameName string) (games *Game, err error) {
	err = db.Model(m).Where("game_name = ?", gameName).Find(&games).Error
	return
}

//Update 更新游戏数据信息
func (m *Game) Update() {
	db.Save(m)
}

//FindAllGame
func (m *Game) FindAllGame() {
	var games []*Game
	db.Model(m).FindInBatches(&games, 100, func(tx *gorm.DB, batch int) error {
		for _, game := range games {
			activeUserValue7d, activeUserValue30d, ActiveUserRate7d, ActiveUserRate30d := NewGameActiveUser().
				CalcRateByGameId(game.ID)
			socialValue7d, socialValue30d, socialRate7d, socialRate30d := NewGameActiveUser().
				CalcRateByGameId(game.ID)
			gameOther := &GameOther{}
			gameOther.ActiveUserValue7d = activeUserValue7d
			gameOther.ActiveUserRate7d = ActiveUserRate7d
			gameOther.ActiveUserValue30d = activeUserValue30d
			gameOther.ActiveUserRate30d = ActiveUserRate30d
			gameOther.SocialValue7d = socialValue7d
			gameOther.SocialRate7d = socialRate7d
			gameOther.SocialValue30d = socialValue30d
			gameOther.SocialRate30d = socialRate30d
			gameOther.UpdateGameOtherByGameId(int(game.ID))
		}
		return nil
	})
}

//FindGameInfoByGameIds 根据游戏id查找相关信息
func (m *Game) FindGameInfoByGameIds(gameIds []int32) (games []*Game, err error) {
	err = db.Model(m).Where("id in (?) and status = 1", gameIds).Find(&games).Error
	return
}

//FindInfoByGameId 根据gameId查找游戏信息
func (m *Game) FindInfoByGameId(gameId int32, isAdmin bool) (game *Game, err error) {
	tx := db.Model(m)
	if !isAdmin {
		tx = tx.Where("status = 1")
	}
	err = tx.Where("id = ?", gameId).Find(&game).Error
	return
}

//FindAllVoteByOrder 根据票数从上到下查询
func (m *Game) FindAllVoteByOrder() (gameMaps map[int32]int, err error) {
	var games []*Game
	db.Model(m).Order("motivate desc").Find(&games)
	if len(games) == 0 {
		return
	}
	gameMaps = make(map[int32]int)
	for k, v := range games {
		gameMaps[v.ID] = k + 1
	}
	return
}

//FindAllGameInfo 查找所有游戏信息
func (m *Game) FindAllGameInfo() (games []*Game, err error) {
	err = db.Model(m).Find(&games).Error
	return 
}

//FindGameInfoByName 根据游戏名称查找游戏信息
func (m *Game) FindGameInfoByName(name string) (game *Game) {
	db.Model(m).Where("name = ?", name).Find(&game)
	return
}

//FindForAdminList 后台管理游戏列表
func (m *Game) FindForAdminList(page, size, status int, keyword string) (games []*Game, count int64, err error) {
	offset := (page - 1) * size
	tx := db.Model(m)
	if keyword != "" {
		s := fmt.Sprintf("%s", "%")
		s = fmt.Sprintf("%s%s", s, keyword)
		s = fmt.Sprintf("%s%s", s, "%")
		tx = tx.Where("game_name like ?", s)
	}
	if status != 2 {
		tx = tx.Where("status = ?", status)
	}
	err = tx.Where("is_del = 0").Count(&count).Offset(offset).Limit(size).Order("created_at desc").Find(&games).Error
	return
}

//UpdateInfoByGameId 根据游戏id更新数据信息
func (m *Game) UpdateGameInfoByGameId(gameId int32, datas map[string]interface{}) (err error) {
	err = db.Model(m).Where(gameId).Updates(datas).Error
	return
}

//FindByNameByKeyword 根据游戏名称取查找游戏数据信息
func (m *Game) FindByNameByKeyword(name string) (res []map[string]interface{}, err error) {
	tx := db.Model(m)
	if name != "" {
		s := fmt.Sprintf("%s", "%")
		s = fmt.Sprintf("%s%s", s, name)
		s = fmt.Sprintf("%s%s", s, "%")
		tx = tx.Where("name like ?", s)
	}
	var games []*Game
	err = tx.Find(&games).Error
	if err != nil {
		return
	}
	res = make([]map[string]interface{}, 0, len(games))
	for _, game := range games {
		res = append(res, map[string]interface{}{
			"key": game.ID,
			"value": game.Name,
		})
	}
	return
}

//FindGameMapByIds 根据游戏id查找数据
func (m *Game) FindGameMapByIds(gameIds []int32) (res map[int32]*Game, err error) {
	var games []*Game
	err = db.Model(m).Where("id in (?)", gameIds).Find(&games).Error
	if err != nil {
		return
	}
	res = make(map[int32]*Game)
	for _, game := range games {
		res[game.ID] = game
	}
	return
}


