// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
	"github.com/spf13/cast"
	"time"
)

const TableNameUserRateThumb = "user_rate_thumbs"

// UserRateThumb mapped from table <user_rate_thumbs>
type UserRateThumb struct {
	ID        int32     `gorm:"column:id;primaryKey;autoIncrement:true" json:"id"`                        // 主键ID
	UserID    int32     `gorm:"column:user_id;not null" json:"user_id"`                                   // 用户id
	RateID    int32     `gorm:"column:rate_id;not null" json:"rate_id"`                                   // 评论id
	Status    int32     `gorm:"column:status;not null" json:"status"`                                     // 点赞状态:0未点赞,1已点赞
	CreatedAt time.Time `gorm:"column:created_at;not null;default:CURRENT_TIMESTAMP" json:"created_at"`   // 创建时间
	UpdatedAt time.Time `gorm:"column:updated_at;not null;default:1970-01-01 08:00:01" json:"updated_at"` // 更新时间
}

// TableName UserRateThumb's table name
func (*UserRateThumb) TableName() string {
	return TableNameUserRateThumb
}

func NewUserRateThumb() *UserRateThumb {
	return &UserRateThumb{}
}

//CreateOrUpdate 新增或更新
func (m *UserRateThumb) CreateOrUpdate(rateId, userId int) (flag int, err error) {
	rateThumb := new(UserRateThumb)
	err = db.Model(m).Where("rate_id = ? and user_id = ?", rateId, userId).Find(&rateThumb).Error
	if err != nil {
		return
	}
	status := 0
	if rateThumb.ID == 0 {
		rateThumb.RateID = cast.ToInt32(rateId)
		rateThumb.UserID = cast.ToInt32(userId)
		rateThumb.Status = 1
		rateThumb.CreatedAt = time.Now()
		rateThumb.UpdatedAt = time.Now()
		status = 1
	} else {
		if rateThumb.Status == 0 {
			status = 1
		} else {
			status = 0
		}
		rateThumb.Status = cast.ToInt32(status)
	}
	err = db.Save(rateThumb).Error
	if err != nil {
		return
	}
	flag = status
	return
}

//FindGameCollectByUserId 根据用户id查找游戏收藏
func (m *UserRateThumb) FindUserRateByUserId(userId int, rateIds []int32) (rateMap map[int32]int, err error) {
	var userRates []*UserRateThumb
	err = db.Model(m).Where("user_id = ? and status = 1", userId).Where("rate_id in (?)", rateIds).Find(&userRates).Error
	if err != nil {
		return
	}
	rateMap = make(map[int32]int, len(userRates))
	for _, rate := range userRates {
		rateMap[rate.RateID] = 1
	}
	return
}
