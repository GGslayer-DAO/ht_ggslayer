// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
	"github.com/spf13/cast"
	"time"
)

const TableNameUserGuidesCollect = "user_guides_collect"

// UserGuidesCollect mapped from table <user_guides_collect>
type UserGuidesCollect struct {
	ID         int32     `gorm:"column:id;primaryKey;autoIncrement:true" json:"id"`
	UserID    int32     `gorm:"column:user_id;primaryKey" json:"user_id"`                                 // 用户id
	GuidesID  int32     `gorm:"column:guides_id;primaryKey" json:"guides_id"`                             // 攻略id
	Status    int32     `gorm:"column:status;not null" json:"status"`                                     // 收藏状态:0未收藏,1已收藏
	CreatedAt time.Time `gorm:"column:created_at;not null;default:CURRENT_TIMESTAMP" json:"created_at"`   // 创建时间
	UpdatedAt time.Time `gorm:"column:updated_at;not null;default:1970-01-01 08:00:01" json:"updated_at"` // 更新时间
}

// TableName UserGuidesCollect's table name
func (*UserGuidesCollect) TableName() string {
	return TableNameUserGuidesCollect
}

func NewUserGuideCollect() *UserGuidesCollect {
	return &UserGuidesCollect{}
}

//CreateOrUpdate 新增或更新
func (m *UserGuidesCollect) CreateOrUpdate(guideId, userId int) (flag int, isAdd bool, err error) {
	guideCollect := new(UserGuidesCollect)
	err = db.Model(m).Where("guides_id = ? and user_id = ?", guideId, userId).Find(&guideCollect).Error
	if err != nil {
		return
	}
	isAdd = true
	status := 0
	if guideCollect.ID == 0 {
		guideCollect.GuidesID = cast.ToInt32(guideId)
		guideCollect.UserID = cast.ToInt32(userId)
		guideCollect.Status = 1
		guideCollect.CreatedAt = time.Now()
		guideCollect.UpdatedAt = time.Now()
		status = 1
	} else {
		if guideCollect.Status == 0 {
			status = 1
		} else {
			status = 0
		}
		guideCollect.Status = cast.ToInt32(status)
		isAdd = false
	}
	err = db.Save(guideCollect).Error
	if err != nil {
		return
	}
	flag = status
	return
}

//FindByUserId 查找用户收藏
func (m *UserGuidesCollect) FindByUserId(userId int) (collects []*UserGuidesCollect) {
	db.Model(m).Where("user_id = ?", userId).Find(&collects)
	return
}

//FindGameCollectByUserId 根据用户id查找游戏收藏
func (m *UserGuidesCollect) FindGuideCollectByUserId(userId int, guidesIds []int32) (collectMap map[int32]int, err error) {
	var collects []*UserGuidesCollect
	err = db.Model(m).Where("user_id = ? and status = 1", userId).Where("guides_id in (?)", guidesIds).Find(&collects).Error
	if err != nil {
		return
	}
	collectMap = make(map[int32]int, len(collects))
	for _, collect := range collects {
		collectMap[collect.GuidesID] = 1
	}
	return
}
