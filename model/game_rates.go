// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
	"time"
)

const TableNameGameRate = "game_rates"

// GameRate mapped from table <game_rates>
type GameRate struct {
	ID          int32     `gorm:"column:id;primaryKey;autoIncrement:true" json:"id"`                        // 主键ID
	GameID      int32     `gorm:"column:game_id;not null" json:"game_id"`                                   // 游戏id
	UserID      int32     `gorm:"column:user_id;not null" json:"user_id"`                                   // 用户id
	Rate        int       `gorm:"column:rate;not null" json:"rate"`                                         // 评分1-5
	ExperReason string    `gorm:"column:exper_reason" json:"exper_reason"`                                  // 经验建议
	ThumbNumber int   	  `gorm:"column:thumb_number" json:"thumb_number"`   							    //点赞数量
	CreatedAt   time.Time `gorm:"column:created_at;not null;default:CURRENT_TIMESTAMP" json:"created_at"`   // 创建时间
	UpdatedAt   time.Time `gorm:"column:updated_at;not null;default:1970-01-01 08:00:01" json:"-"` // 更新时间
}

// TableName GameRate's table name
func (*GameRate) TableName() string {
	return TableNameGameRate
}

func NewGameRate() *GameRate {
	return new(GameRate)
}

func (m *GameRate) Create() error {
	return db.Save(m).Error
}

//FindByUserIdAndGameId 根据用户id和游戏id查找评论信息
func (m *GameRate) FindByUserIdAndGameId(gameId, userId int32) (gameRates []*GameRate, err error) {
	err = db.Model(m).Where("game_id = ? and user_id = ?", gameId, userId).Find(&gameRates).Error
	return
}

//FindRateByGameId 根据游戏id查找评论数据信息
func (m *GameRate) FindRateByGameId(gameId int32, page, size, tab int) (gameRates []*GameRate, count int64, err error) {
	offset := (page - 1) * size
	tx := db.Model(m).Where("game_id = ?", gameId)
	if tab == 1 {
		tx = tx.Order("thumb_number desc")
	} else {
		tx = tx.Order("created_at desc")
	}
	err = tx.Count(&count).Offset(offset).Limit(size).Find(&gameRates).Error
	return
}

//FindRateById 根据id查找评论信息
func (m *GameRate) FindRateById(rateId int) (rates *GameRate, err error) {
	err = db.Model(m).Where("id = ?", rateId).Find(&rates).Error
	return
}

//FindRateByUserId 根据用户id查找评论信息
func (m *GameRate) FindRateByUserId(userId, page, size int) (rates []*GameRate, count int64, err error) {
	offset := (page - 1) * size
	err = db.Model(m).Where("user_id = ?", userId).Count(&count).Offset(offset).Limit(size).Find(&rates).Error
	return
}
