// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"ggslayer/utils"
	"time"
)

const TableNameGameToken = "game_tokens"

// GameToken mapped from table <game_tokens>
type GameToken struct {
	ID             int32     `gorm:"column:id;primaryKey;autoIncrement:true" json:"-"`                        // 主键ID
	GameID         int32     `gorm:"column:game_id;not null" json:"-"`                                   // 游戏id
	Logo           string    `gorm:"column:logo" json:"logo"`                                                  // logo
	Symbol         string    `gorm:"column:symbol;not null" json:"symbol"`                                     // 币名称
	TokenPrice     string   `gorm:"column:token_price;not null" json:"token_price"`                           // 当前价格
	TokenHolder    int64     `gorm:"column:token_holder;not null" json:"token_holder"`                         // 持有人数
	ChangeRate24h  string   `gorm:"column:change_rate_24h;not null" json:"change_rate_24h"`                   // 24小时交易率
	CreatedAt      time.Time `gorm:"column:created_at;not null;default:CURRENT_TIMESTAMP" json:"-"`   // 创建时间
	UpdatedAt      time.Time `gorm:"column:updated_at;not null;default:1970-01-01 08:00:01" json:"-"` // 更新时间
}

func NewGameToken() *GameToken {
	return &GameToken{}
}

// TableName GameToken's table name
func (*GameToken) TableName() string {
	return TableNameGameToken
}

func (m *GameToken) Create() {
	db.Create(m)
}

const (
	_insertGameTokenSql = "insert into game_tokens (game_id,logo,token_price,symbol,token_holder,change_rate_24h,created_at,updated_at) values "
)

//BatchInserch 批量插入
func (m *GameToken) BatchInserch(gameTokens []*GameToken) {
	db.Exec(m.GenInsertSQL(gameTokens))
}

// GenInsertSQL 生成批量插入的SQL
func (m *GameToken) GenInsertSQL(gameTokens []*GameToken) string {
	if len(gameTokens) == 0 {
		return ""
	}
	var (
		buf bytes.Buffer
		sql string
		now = time.Now().Local().Format(utils.TimeLayoutStr)
	)
	buf.WriteString(_insertGameTokenSql)
	for _, v := range gameTokens {
		s := fmt.Sprintf("(%d,'%s','%s','%s',%d,'%s','%s','%s'),", v.GameID,
			v.Logo, v.TokenPrice, v.Symbol, v.TokenHolder, v.ChangeRate24h, now, now)
		buf.WriteString(s)
	}
	sql = buf.String()
	return sql[0 : len(sql)-1]
}

//分页查找gametoken
func (m *GameToken) FindGameToken(page, size int) (gameTokens []*GameToken, err error) {
	offset := (page - 1) * size
	err = db.Model(m).Offset(offset).Limit(size).Find(&gameTokens).Error
	return
}

//FindGameTokenByGameId
func (m *GameToken) FindGameTokenByGameId(gameId []int32) (gameTokenMap map[int32][]*GameToken, err error) {
	var gameTokens []*GameToken
	err = db.Model(m).Where("game_id in (?)", gameId).Find(&gameTokens).Error
	if err != nil {
		return
	}
	gameTokenMap = make(map[int32][]*GameToken)
	for _, gameToken := range gameTokens {
		if v, ok := gameTokenMap[gameToken.GameID]; ok {
			v = append(v, gameToken)
			gameTokenMap[gameToken.GameID] = v
		} else {
			b := make([]*GameToken, 0)
			b = append(b, gameToken)
			gameTokenMap[gameToken.GameID] = b
		}
	}
	return
}


//根据gameId更新token数据
func (m *GameToken) UpdateGameTokenByGameId(gameId int32, symbol string) {
	db.Model(m).Where("game_id = ? and symbol = ?", gameId, symbol).Updates(m)
	return
}

//FindTokenBySymbol 根据symbol获取代币数据信息
func (m *GameToken) FindTokenBySymbol(symbols []string) (tokenMap map[string]*GameToken, err error) {
	var gameToken []*GameToken
	err = db.Model(m).Where("symbol in (?)", symbols).Find(&gameToken).Error
	if err != nil {
		return
	}
	tokenMap = make(map[string]*GameToken)
	for _, v := range gameToken {
		tokenMap[v.Symbol] = v
	}
	return
}

//FindTokenByGameId 根据游戏id查找token
func (m *GameToken) FindTokenByGameIds(gameIds []int32) (tokenMap map[string]*GameToken, err error) {
	var gameTokens []*GameToken
	err = db.Model(m).Where("game_id in (?)", gameIds).Find(&gameTokens).Error
	if err != nil {
		return
	}
	tokenMap = make(map[string]*GameToken)
	for _, gameToken := range gameTokens {
		tokenMap[fmt.Sprintf("%d_%s", gameToken.GameID, gameToken.Symbol)] = gameToken
	}
	return
}
