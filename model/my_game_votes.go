// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
	"ggslayer/utils"
)

const TableNameMyGameVote = "my_game_votes"

// MyGameVote mapped from table <my_game_votes>
type MyGameVote struct {
	ID       int32 `gorm:"column:id;primaryKey;autoIncrement:true" json:"id"` // 主键ID
	UserID   int32 `gorm:"column:user_id;not null" json:"user_id"`            // 用户id
	GameID   int32 `gorm:"column:game_id;not null" json:"game_id"`            // 游戏id
	Motivate int64 `gorm:"column:motivate" json:"motivate"`                   // 游戏票数
}

// TableName MyGameVote's table name
func (*MyGameVote) TableName() string {
	return TableNameMyGameVote
}

func NewMyGameVote() *MyGameVote {
	return &MyGameVote{}
}

//FirstOrCreate 游戏投票数据
func (m *MyGameVote) FirstOrCreate(gameId, userId int32, voteNumber int64) {
	myVote := &MyGameVote{}
	db.Model(m).Where("game_id = ? and user_id = ?", gameId, userId).Find(myVote)
	if myVote.ID == 0 {
		myVote.UserID = userId
		myVote.GameID = gameId
		myVote.Motivate = voteNumber
	} else {
		motivate := int(utils.Add(float64(myVote.Motivate), float64(voteNumber), 0))
		myVote.Motivate = int64(motivate)
	}
	db.Save(myVote)
}

func (m *MyGameVote) Save() error {
	return db.Save(m).Error
}

//FindVotePickForGame 查找游戏的投票人数
func (m *MyGameVote) FindVotePickForGame(gameId int32) (userIds []int, err error) {
	userIds = make([]int, 0)
	err = db.Model(m).Where("game_id = ?", gameId).Group("game_id").Limit(10).Pluck("user_id", &userIds).Error
	return
}

//FindVotePickByUserId 根据用户id查找投票数据信息
func (m *MyGameVote) FindVotePickByUserId(userId int, page, size int) (gameIds []int32, count int64, err error) {
	offset := (page - 1) * size
	err = db.Model(m).Where("user_id = ?", userId).Count(&count).Offset(offset).Limit(size).Pluck("game_id", &gameIds).Error
	return
}
