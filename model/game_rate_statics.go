// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
	"ggslayer/utils"
	"github.com/spf13/cast"
)

const TableNameGameRateStatic = "game_rate_statics"

// GameRateStatic mapped from table <game_rate_statics>
type GameRateStatic struct {
	ID        int32   `gorm:"column:id;primaryKey;autoIncrement:true" json:"id"` // 主键ID
	GameID    int32   `gorm:"column:game_id;not null" json:"game_id"`            // 游戏id
	RateNum   int   `gorm:"column:rate_num;not null" json:"-"`          // 评分数
	RateValid int  `gorm:"column:rate_valid" json:"-"`               // 评分有效数
	RateAvg   float64 `gorm:"column:rate_avg" json:"rate_avg"`                   // 评分平均数
	Rate1    int   `gorm:"column:rate_1;not null" json:"rate_1"`            // 1分
	Rate2    int   `gorm:"column:rate_2;not null" json:"rate_2"`            // 2分
	Rate3    int   `gorm:"column:rate_3;not null" json:"rate_3"`            // 3分
	Rate4    int   `gorm:"column:rate_4;not null" json:"rate_4"`            // 4分
	Rate5    int   `gorm:"column:rate_5;not null" json:"rate_5"`            // 5分
}

// TableName GameRateStatic's table name
func (*GameRateStatic) TableName() string {
	return TableNameGameRateStatic
}

func NewGameRateStatic() *GameRateStatic {
	return new(GameRateStatic)
}

//FirstOrCreate
func (m *GameRateStatic) FirstOrCreate(gameId int32, rate int) error {
	static := &GameRateStatic{}
	db.Model(m).Where("game_id = ?", gameId).Find(static)
	if static.ID == 0 {
		static.GameID = gameId
		static.RateNum = rate
		static.RateValid = 1
		static.RateAvg = cast.ToFloat64(rate)
	} else {
		rateNum := utils.Add(float64(static.RateNum), float64(rate), 0)
		rateValid := utils.Add(float64(static.RateValid), 1, 0)
		rateAvg := utils.Div(rateNum, rateValid, 2)
		static.RateNum = cast.ToInt(rateNum)
		static.RateValid = cast.ToInt(rateValid)
		static.RateAvg = rateAvg
	}
	switch rate {
		case 1:
			static.Rate1 = static.Rate1 + 1
		case 2:
			static.Rate2 = static.Rate2 + 1
		case 3:
			static.Rate3 = static.Rate3 + 1
		case 4:
			static.Rate4 = static.Rate4 + 1
		case 5:
			static.Rate5 = static.Rate5 + 1
	}
	return db.Save(static).Error
}

func (m *GameRateStatic) FindByGameId(gameId int32) (statics *GameRateStatic, err error) {
	err = db.Model(m).Where("game_id = ?", gameId).Find(&statics).Error
	return
}


