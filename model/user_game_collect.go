// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
	"github.com/spf13/cast"
	"time"
)

const TableNameUserGameCollect = "user_game_collect"

// UserGameCollect mapped from table <user_game_collect>
type UserGameCollect struct {
	ID         int32     `gorm:"column:id;primaryKey;autoIncrement:true" json:"id"`
	UserID    int32     `gorm:"column:user_id" json:"user_id"`                                 // 用户id
	GameID    int32     `gorm:"column:game_id" json:"game_id"`                                 // 游戏id
	Status    int32     `gorm:"column:status;not null" json:"status"`                                     // 收藏状态:0未收藏,1已收藏
	CreatedAt time.Time `gorm:"column:created_at;not null;default:CURRENT_TIMESTAMP" json:"created_at"`   // 创建时间
	UpdatedAt time.Time `gorm:"column:updated_at;not null;default:1970-01-01 08:00:01" json:"updated_at"` // 更新时间
}

// TableName UserGameCollect's table name
func (*UserGameCollect) TableName() string {
	return TableNameUserGameCollect
}

func NewUserGameCollect() *UserGameCollect {
	return &UserGameCollect{}
}

//CreateOrUpdate 新增或更新
func (m *UserGameCollect) CreateOrUpdate(gameId, userId int) (flag int, isAdd bool, err error) {
	gameCollect := new(UserGameCollect)
	err = db.Model(m).Where("game_id = ? and user_id = ?", gameId, userId).Find(&gameCollect).Error
	if err != nil {
		return
	}
	isAdd = true
	status := 0
	if gameCollect.GameID == 0 {
		gameCollect.GameID = cast.ToInt32(gameId)
		gameCollect.UserID = cast.ToInt32(userId)
		gameCollect.Status = 1
		gameCollect.CreatedAt = time.Now()
		gameCollect.UpdatedAt = time.Now()
		status = 1
	} else {
		if gameCollect.Status == 0 {
			status = 1
		} else {
			status = 0
		}
		gameCollect.Status = cast.ToInt32(status)
		isAdd = false
	}
	err = db.Save(gameCollect).Error
	if err != nil {
		return
	}
	flag = status
	return
}

//FindGameCollectByUserId 根据用户id查找游戏收藏
func (m *UserGameCollect) FindGameCollectByUserId(userId int, gameIds []int32) (collectMap map[int32]int, err error) {
	var gameCollects []*UserGameCollect
	err = db.Model(m).Where("user_id = ? and status = 1", userId).Where("game_id in (?)", gameIds).Find(&gameCollects).Error
	if err != nil {
		return
	}
	collectMap = make(map[int32]int, len(gameCollects))
	for _, collect := range gameCollects {
		collectMap[collect.GameID] = 1
	}
	return
}

//根据用户id查找用户收藏游戏
func (m *UserGameCollect) FindUserCollectGameByUserId(userId int) (gameIds []int32, err error) {
	err = db.Model(m).Where("user_id = ? and status = 1", userId).Pluck("game_id", &gameIds).Error
	return
}

//FindByUserId 查找用户收藏
func (m *UserGameCollect) FindByUserId(userId int) (collects []*UserGameCollect) {
	db.Model(m).Where("user_id = ?", userId).Find(&collects)
	return
}

//FindByUserIdAndGameId根据用户id和gameId判断有无收藏
func (m *UserGameCollect) FindByUserIdAndGameId(userId int, gameId int32) (collectFlag int, err error) {
	collect := new(UserGameCollect)
	err = db.Model(m).Where("user_id = ? and game_id = ? and status = 1", userId, gameId).Find(&collect).Error
	if collect.ID > 0 {
		collectFlag = 1
	}
	return
}


