// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model



const TableNameGameRanking = "game_rankings"

// GameRanking mapped from table <game_rankings>
type GameRanking struct {
	ID            int32 `gorm:"column:id;primaryKey;autoIncrement:true" json:"id"` // 主键ID
	GameID        int32 `gorm:"column:game_id;not null" json:"game_id"`            // 游戏id
	SocialRank    int `gorm:"column:social_rank" json:"social_rank"`             // 社交分排序
	SocialRankOld int `gorm:"column:social_rank_old" json:"social_rank_old"`     // 往期社交分排序
	VoteRank      int `gorm:"column:vote_rank" json:"vote_rank"`                 // 投票排序
	VoteRankOld   int `gorm:"column:vote_rank_old" json:"vote_rank_old"`         // 往期投票排序
}

// TableName GameRanking's table name
func (*GameRanking) TableName() string {
	return TableNameGameRanking
}

func NewGameRanking() *GameRanking {
	return &GameRanking{}
}

func (m *GameRanking) FirstOrCreate(gameId int32, socialRank, voteRank int) {
	ranking := &GameRanking{}
	db.Model(m).Where("game_id = ?", gameId).Find(ranking)
	if ranking.ID == 0 {
		ranking.GameID = gameId
		ranking.SocialRank = socialRank
		ranking.SocialRankOld = socialRank
		ranking.VoteRank = voteRank
		ranking.VoteRankOld = voteRank
	} else {
		socialOld := ranking.SocialRank
		voteOld := ranking.VoteRank
		ranking.SocialRankOld = socialOld
		ranking.VoteRankOld = voteOld
		ranking.SocialRank = socialRank
		ranking.VoteRank = voteRank
	}
	ranking.Save()
	return
}

func (m *GameRanking) Save() error {
	return db.Save(m).Error
}

func (m *GameRanking) FindAllRankingByGameIds(gameIds []int32) (rankMaps map[int32]*GameRanking, err error) {
	var ranks []*GameRanking
	err = db.Model(m).Where("game_id in (?)", gameIds).Find(&ranks).Error
	if err != nil {
		return
	}
	rankMaps = make(map[int32]*GameRanking)
	for _, rank := range ranks {
		rankMaps[rank.GameID] = rank
	}
	return
}
